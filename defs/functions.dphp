type ReturnType<T> = T is (...args: mixed[]): infer R ? R : never;

function response(): ResponseFactory;
function response<TContent, TStatus of int, THeaders of array>(TContent $c = '', TStatus $s = 200, THeaders $h = []):
    Response<TContent, TStatus, THeaders>;

#[Throws<HttpResponseException<TCode>>]
function abort<TCode extends Response>(TCode $code): never;

#[Throws<HttpResponseException<ReturnType<TCode['toResponse']>>>]
function abort<TCode extends Responsable>(TCode $code): never;

#[Throws<NotFoundHttpException<TMessage>>]
function abort<TMessage>(404 $code, TMessage $message = ''): never;

#[Throws<HttpException<TCode, TMessage, null, THeaders>>]
function abort<TCode of int|Responsable|Response, TMessage, THeaders of array>(TCode $code, TMessage $message = '', THeaders $headers = []): never;
